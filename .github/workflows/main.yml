name: Foodgram CI/CD

on:
  push:
    branches:
      - main

jobs:
  build_backend:
    name: Build and push backend image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build_frontend:
    name: Build and push frontend image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: 
      - build_backend
      - build_frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy infrastructure files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "infra/"
          target: "~/foodgram/"

      - name: Copy documentation
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docs/"
          target: "~/foodgram/"

      - name: Deploy application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/foodgram
            
            # Create .env file
            cat > .env << EOF
            DEBUG=${{ secrets.DEBUG }}
            SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
            CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}
            DB_ENGINE=${{ secrets.DB_ENGINE }}
            DB_NAME=${{ secrets.DB_NAME }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            EOF
            
            # Stop and remove old containers
            sudo docker compose down --remove-orphans || true
            
            # Remove old images
            sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest || true
            sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest || true
            
            # Pull new images and start services
            sudo docker compose up -d
            
            # Wait for backend to be ready
            sleep 30
            
            # Run migrations
            sudo docker compose exec -T backend python manage.py migrate || true
            
            # Collect static files
            sudo docker compose exec -T backend python manage.py collectstatic --no-input || true
            
            # Clean up unused images
            sudo docker image prune -f

  notify:
    name: Send notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Send success message
        if: needs.deploy.result == 'success'
        uses: appleboy/telegram-action@v1.0.3
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Деплой Foodgram успешно выполнен!
            
            Автор: ${{ github.actor }}
            Коммит: ${{ github.event.commits[0].message }}
            Сервер: ${{ secrets.HOST }}
            Время: ${{ github.event.head_commit.timestamp }}

      - name: Send failure message
        if: needs.deploy.result == 'failure'
        uses: appleboy/telegram-action@v1.0.3
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Ошибка при деплое Foodgram!
            
            Автор: ${{ github.actor }}
            Коммит: ${{ github.event.commits[0].message }}
            Сервер: ${{ secrets.HOST }}
            Логи: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}